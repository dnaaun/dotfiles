snippet log "setup logging" b
import logging
logger = logging.getLogger(__name__)
endsnippet

snippet ann "from __future__ import annotations" b
from __future__ import annotations
endsnippet


snippet withf "open file in the context-manager way"
with ${1:path}.open(${2:}) as ${3:fb}:
    ${4:}
endsnippet

snippet ifm "ifmain"
if __name__ == "__main__":
    ${1}
endsnippet

snippet class "class SomeClass"
class ${1:SomeClass}:
    ${2:pass}
endsnippet

snippet sup "super()." m
super().
endsnippet


snippet impp "from pathlib import Path" bm
from pathlib import Path
endsnippet 

snippet "\b(Protocol|NamedTuple|TypedDict)\b" "Inherited mypy types" rwb
class ${1:ClassName}(`!p
word_that_triggered = match.groups()[0]
snip.rv = word_that_triggered`):
    ${2:attr: type}
endsnippet


snippet Tv "TypeVar" bw
${1} = TypeVar("$1"${3:, bound=${2:something to subclass}})
endsnippet


snippet TYPE_CHECKING "if TYPE_CHECKING" bm
if TYPE_CHECKING:
    ${1:pass}
else:
    ${2:pass}
endsnippet


snippet attr.s "autoattrib" bm
@attr.s(auto_attribs=True)
endsnippet

snippet def "def func() -> None:" b
def ${1:func}(${2:args}) -> ${3:None}:
	${4:${VISUAL:pass}}
endsnippet
