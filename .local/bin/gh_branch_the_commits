#!/usr/bin/env python3
import subprocess
import string
import argparse
from dataclasses import dataclass


@dataclass
class Args:
    draft: bool
    do_push: bool
    fill: bool
    base_commit: str
    create_prs: bool


def parse_args() -> Args:
    parser = argparse.ArgumentParser()
    parser.add_argument("--draft", "-d", dest="draft", action="store_true")
    parser.add_argument("--no-push", dest="do_push", action="store_false")
    parser.add_argument("--no-fill", "-F",  dest="fill", action="store_false")
    parser.add_argument("--base-commit", dest="base_commit", default="main")
    parser.add_argument("--create-prs", dest="create_prs", action="store_true")
    args_parsed = parser.parse_args()

    return Args(
        draft=args_parsed.draft,
        fill=args_parsed.fill,
        do_push=args_parsed.do_push,
        base_commit=args_parsed.base_commit,
        create_prs=args_parsed.create_prs,
    )


args = parse_args()

# Get the output of running f"git log --online {master}...HEAD"
# and split it into a list of lines
commits = (
    subprocess.run(
        ["git", "log", "--oneline", f"{args.base_commit}...HEAD"],
        stdout=subprocess.PIPE,
    )
    .stdout.decode("utf-8")
    .splitlines()
)

commits.reverse()


print(repr(args))


def run(*args):
    proc = subprocess.run(args)
    if proc.stdout:
        print(proc.stdout)
    if proc.stderr:
        print(proc.stderr)


@dataclass
class Branch:
    name: str
    commit_id: str


branches = []


for line in commits:
    commit_id, commit_msg = line.split(" ", 1)
    simpler_msg = "".join([i if i in string.ascii_letters else "_" for i in commit_msg])
    branch_name = f"dt/{simpler_msg}"

    branches.append(Branch(branch_name, commit_id))

for prev_branch, branch in zip([None] + branches[:-1], branches):
    run("git", "branch", "-qD", branch.name)
    run("git", "branch", branch.name, branch.commit_id)

    if args.do_push:
        run("git", "push", "origin", "-f", branch.name)

    if args.create_prs:
        draft_arg = ["--draft"] if args.draft else []
        base_arg = ["--base", prev_branch.name if prev_branch else args.base_commit]
        fill_arg = ["--fill"] if args.fill else []
        run("gh", "pr", "create", "--head", branch.name, *draft_arg, *base_arg, *fill_arg)
